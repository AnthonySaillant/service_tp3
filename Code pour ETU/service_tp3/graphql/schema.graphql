scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

enum Rating {
    G
    PG
    PG_13 #Ne marche pas: PG-13
    R
    NC_17 #Ne marche pas: NC-17
}

type Role {
    id: ID!
    name: String!
    Users: [User!]! @hasMany
}

type Language {
    id: ID!
    name: String!
    Films: [Film!]! @hasMany
}

type User {
    id: ID!
    login: String!
    password: String!
    email: String!
    last_name: String!
    first_name: String!
    role_id: ID!
    critics: [Critic!]! @hasMany
    role: Role! @belongsTo
}

type Film {
    id: ID!
    title: String!
    release_year: Int!
    length: Float!
    description: String!
    rating: Rating!
    language_id: ID!
    special_features: String!
    image: String!
    language: Language! @belongsTo
    critics: [Critic!]! @hasMany
    statistic: Statistic! @hasOne
    actors: [Actor!]! @belongsToMany
}

type Critic {
    id: ID!
    user_id: ID!
    film_id: ID!
    score: Float!
    comment: String!
    film: Film! @belongsTo
    user: User! @belongsTo
}

type Statistic {
    id: ID!
    average_score: Float!
    nb_votes: Int!
    film_id: ID!
    film: Film! @belongsTo
}

type Actor {
    id: ID!
    last_name: String!
    first_name: String!
    birthdate: Date!
    films: [Film!]! @belongsToMany
}

type Query {
    film(id: ID! @eq): Film @find @guard

  films(    #Les filtres ne marchent pas surement du a l'utilisation du @whereConditions, jai suivi la doc et meme regarder en classe avec vous mais cela ne fonctionne pas pour moi (Lorik)
            # Vous m'aviez dit de l'utiliser en classe alors c'est ce que j'ai fait. (Lorik)
    keywordTitle: String
    keywordDescription: String
    minYear: Int
    maxYear: Int
    minLength: Int
    maxLength: Int
    page: Int = 1
    first: Int = 10
  ): [Film!]!
  @paginate
  @whereConditions(
    combinator: "AND"
    conditions: [
      {
        column: "title"
        operator: "like"
        value: "%{{ keywordTitle }}%"
        boolean: "AND"
      },
      {
        column: "description"
        operator: "like"
        value: "%{{ keywordDescription }}%"
        boolean: "AND"
      },
      {
        column: "release_year"
        operator: ">="
        value: "{{ minYear }}"
      },
      {
        column: "release_year"
        operator: "<="
        value: "{{ maxYear }}"
      },
      {
        column: "length"
        operator: ">="
        value: "{{ minLength }}"
      },
      {
        column: "length"
        operator: "<="
        value: "{{ maxLength }}"
      }
    ]
  )


    me: User @auth

    allStatistics: [Statistic!]! @all
    allActors: [Actor!]! @all
    allfilms: [Film!]! @all
}


type Mutation {
    createCritic(input: CreateCriticInput!): Critic
        @field(resolver: "App\\GraphQL\\Queries\\CreateCriticResolver")

    createActor(input: CreateActorInput! @spread): Actor!
        @field(resolver: "App\\GraphQL\\Queries\\CreateActorResolver")
        @guard

    updateFilmImage(input: UpdateFilmImageInput! @spread): Film!
        @field(resolver: "App\\GraphQL\\Queries\\UpdateFilmImageResolver")
}

input CreateCriticInput {
    film_id: ID!
    score: Float!
    comment: String!
}

input CreateActorInput {
    last_name: String!
    first_name: String!
    birthdate: Date!
    films: CreateFilmBelongsToMany
}

input CreateFilmBelongsToMany {
    connect: [ID]
}

input UpdateFilmImageInput {
    id: ID!
    image: String!
}

type PaginatorInfo {
    currentPage: Int!
}
